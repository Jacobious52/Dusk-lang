
// as to be compatable in 0.1
// 0.2 will add stuff like
// multple let assignments e.g (let a, b = 0)
// reverse function calling syntax  e.g (let b = a1.a2.call(a3))

// stack pointer and stack
let sp = 0
let stack = 1024::0 // create an array of 1024 zeros
// note: range contructor 0..10 creates array from 0 to 9

// instruction pointer
let ip = 0
// source string. opcodes
let src = ""

// locations of the branch instruction '[' to jump back to
let branches = []

let leftBranch = ! {
    if !stack[sp] {
        branches = push(branches, ip)
        while src[ip] != ']' {
            if ip > len(src)-1: break
            ip+=1
        }
    }
}

let rightBranch = ! {
    if stack[sp]: ip = pop(branches)
}

let opFunctions = {
    '>' : ! sp += 1
    '<' : ! sp -= 1
    '+' : ! stack[sp] += 1
    '-' : ! stack[sp] -= 1
    '.' : ! show(stack[sp])
    ',' : ! sp = readc!
    '[' : leftBranch
    ']' : rightBranch
}

let main = |args| {
    src = reads!

    for instruction in src {
        if src[ip] in opFunctions {
            opFunctions(instruction)!
            sp += 1
        } else {
            show("unknown instruction")
            break
        }
    }

    ret 0
}

main!
