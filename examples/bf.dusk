
let sp = 0
let stack = alloc(1024, 0)
let jumps = []

let iter = |src, ip, f| {
    if ip < len(src) {
        ip = f(src, ip)
        iter(src, ip, f)
    }
}

let eval = |src, ip| {
    let op = src[ip]

    if op == '>': sp+=1
    else if op == '<': sp-=1
    else if op == '+': stack[sp] += 1
    else if op == '-': stack[sp] -= 1
    else if op == '.': print(itoa(stack[sp]))
    else if op == ',': stack[sp] = atoi(readc!)
    else if op == '[' {
        jumps = push(jumps, ip)
        if stack[sp] == 0 {
            let skip = |ip, bal| {
                if bal == 0: ip
                else if src[ip] == '[': skip(ip+1, bal+1)
                else if src[ip] == ']': skip(ip+1, bal-1)
                else skip(ip+1, bal)
            }
            ip = skip(ip, 1)
        }
    } else if op == ']' {
        if stack[sp] != 0 {
            if last(jumps) == nil: println("\nerror\n")
            else ip = pop(jumps)-1
        }
    }

    ret ip+1
}

let main = || {
    let src = readln!
    iter(src, 0, eval)
}

main!
